Sub ValidateActions()

    On Error GoTo ErrorHandler

    ' Allow user to select file path
    Dim filePath As String
    With Application.FileDialog(msoFileDialogFilePicker)
        .Title = "Select Input File"
        .Filters.Add "Excel Files", "*.xls; *.xlsx; *.xlsm", 1
        If .Show = True Then
            filePath = .SelectedItems(1)
        Else
            Exit Sub
        End If
    End With

    ' Open the workbook
    Dim wb As Workbook
    Set wb = Workbooks.Open(filePath)

    ' Get the worksheet
    Dim ws As Worksheet
    Set ws = wb.Sheets(1) ' Change sheet index if needed

    ' Add "VBA Action" column at AA
    ws.Columns("AA:AA").Insert Shift:=xlToRight
    ws.Cells(1, "AA") = "VBA Action"

    ' Loop through data rows to remove unnecessary duplicates
    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    Dim i As Long
    For i = lastRow To 2 Step -1

        ' Get Customer ID
        Dim customerID As String
        customerID = ws.Cells(i, "B").Value

        ' Find duplicates based on Customer ID
        Dim duplicateRows As Range
        Set duplicateRows = FindAllDuplicates(ws, i, "B", customerID)

        If Not duplicateRows Is Nothing Then
            ' Get Company Name Match for the current row
            Dim companyNameMatch As String
            companyNameMatch = ws.Cells(i, "AL").Value

            If duplicateRows.Count > 2 And companyNameMatch = "No" Then
                ws.Rows(i).Delete
            End If
        End If

    Next i

    ' Recalculate lastRow after deleting rows
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row

    ' Sort by Customer ID (Column B)
    ws.Sort.SortFields.Clear
    ws.Sort.SortFields.Add Key:=Range("B:B"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    With ws.Sort
        .SetRange Range("A1:AP" & ws.Cells(ws.Rows.Count, "A").End(xlUp).Row)
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With

    ' Loop through data rows again to determine VBA Actions and highlight
    For i = 2 To lastRow

        ' Get values from relevant columns
        Dim groupName As String
        groupName = ws.Cells(i, "K").Value

        Dim matchingCompanyName As String
        matchingCompanyName = ws.Cells(i, "AE").Value

        Dim brokerAgencyName As String
        brokerAgencyName = ws.Cells(i, "V").Value

        Dim matchingPartnerName As String
        matchingPartnerName = ws.Cells(i, "AG").Value

        Dim matchingConfigName As String
        matchingConfigName = ws.Cells(i, "AI").Value

        Dim matchingConfigOwner As String
        matchingConfigOwner = ws.Cells(i, "AJ").Value

        Dim companyNameMatch As String
        companyNameMatch = ws.Cells(i, "AK").Value

        Dim addressMatch As String
        addressMatch = ws.Cells(i, "AL").Value

        Dim emailMatch As String
        emailMatch = ws.Cells(i, "AM").Value

        Dim usernameMatch As String
        usernameMatch = ws.Cells(i, "AN").Value

        Dim userPhoneMatch As String
        userPhoneMatch = ws.Cells(i, "AP").Value

        ' Rule for Deactivation based on duplicate Customer ID and UnitedHealthcare (Prioritized)
        Dim duplicateRows As Range
        Set duplicateRows = FindAllDuplicates(ws, i, "B", ws.Cells(i, "B").Value)
        If Not duplicateRows Is Nothing Then
            Dim hasUnitedHealth As Boolean
            hasUnitedHealth = False
            Dim c As Range 
            For Each c In duplicateRows
                If ws.Cells(c.Row, "AG") Like "*UnitedHealth*" Then
                    hasUnitedHealth = True
                    ws.Cells(c.Row, "AA") = "Deactivate"
                End If
            Next c
            If hasUnitedHealth Then
                ws.Cells(i, "AA") = "Add-on"
            Else
                ' Apply other validation rules only if not deactivated
                If LCase(matchingConfigOwner) Like "*select health*" Then
                    vbaAction = "New Client"
                ElseIf LCase(matchingPartnerName) Like "*unitedhealthcare*" Then
                    vbaAction = "No action"
                ElseIf InStr(matchingConfigName, "UHC Enhancement") > 0 Then
                    vbaAction = "No action"
                ElseIf groupName <> matchingCompanyName And companyNameMatch = "No" And addressMatch = "No" And usernameMatch = "No" Then
                    vbaAction = "New Client"
                ElseIf brokerAgencyName = "" And matchingPartnerName <> "" Then
                    vbaAction = "New Client"
                ElseIf groupName = matchingCompanyName And brokerAgencyName = matchingPartnerName And InStr(matchingConfigOwner, "Select Health") > 0 Then
                    vbaAction = "New Client"
                ElseIf brokerAgencyName = matchingPartnerName And groupName = matchingCompanyName Then
                    vbaAction = "Add-on"
                ElseIf companyNameMatch = "No" And addressMatch = "Yes" And emailMatch = "Yes" Then
                    vbaAction = "Add-on"
                ElseIf companyNameMatch = "No" And addressMatch = "Yes" And userPhoneMatch = "Yes" Then
                    vbaAction = "Add-on"
                ElseIf companyNameMatch = "Yes" And addressMatch = "Yes" Then
                    vbaAction = "Add-on"
                Else
                    ' Default action if no other rules apply
                    vbaAction = "Review" 
                End If
            End If
        Else
            ' Apply other validation rules if no duplicates
            If LCase(matchingConfigOwner) Like "*select health*" Then
                vbaAction = "New Client"
            ElseIf LCase(matchingPartnerName) Like "*unitedhealthcare*" Then
                vbaAction = "No action"
            ElseIf InStr(matchingConfigName, "UHC Enhancement") > 0 Then
                vbaAction = "No action"
            ElseIf groupName <> matchingCompanyName And companyNameMatch = "No" And addressMatch = "No" And usernameMatch = "No" Then
                vbaAction = "New Client"
            ElseIf brokerAgencyName = "" And matchingPartnerName <> "" Then
                vbaAction = "New Client"
            ElseIf groupName = matchingCompanyName And brokerAgencyName = matchingPartnerName And InStr(matchingConfigOwner, "Select Health") > 0 Then
                vbaAction = "New Client"
            ElseIf brokerAgencyName = matchingPartnerName And groupName = matchingCompanyName Then
                vbaAction = "Add-on"
            ElseIf companyNameMatch = "No" And addressMatch = "Yes" And emailMatch = "Yes" Then
                vbaAction = "Add-on"
            ElseIf companyNameMatch = "No" And addressMatch = "Yes" And userPhoneMatch = "Yes" Then
                vbaAction = "Add-on"
            ElseIf companyNameMatch = "Yes" And addressMatch = "Yes" Then
                vbaAction = "Add-on"
            Else
                ' Default action if no other rules apply
                vbaAction = "Review" 
            End If
        End If

        ' Write VBA Action to the cell
        ws.Cells(i, "AA") = vbaAction 

        ' Highlight row if Action (Column AB) and VBA Action don't match (case-insensitive)
        If LCase(ws.Cells(i, "AB").Value) <> LCase(vbaAction) Then 
            ws.Rows(i).Interior.ColorIndex = 3 ' Highlight red
        End If

        ' Check for missing values and highlight rows
        If IsEmpty(ws.Cells(i, "B")) Or IsEmpty(ws.Cells(i, "S")) Or IsEmpty(ws.Cells(i, "T")) Then
            ws.Rows(i).Interior.ColorIndex = 6 
        End If

    Next i

    ' Recalculate lastRow after potential deletions in deactivation rule
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row

    ' Save and close the workbook
    wb.Save
    wb.Close

    Exit Sub

ErrorHandler:
    MsgBox "An error occurred: " & Err.Description, vbCritical
    ' Add additional error handling or logging here

End Sub

' Function to find ALL duplicate rows based on a column value (with loop limit)
Function FindAllDuplicates(ws As Worksheet, currentRow As Long, colLetter As String, value As String) As Range

    Dim firstAddress As String
    Dim resultRange As Range
    Dim loopCounter As Long
    loopCounter = 0

    With ws.Range(colLetter & ":" & colLetter)
        Set foundCell = .Find(What:=value, After:=.Cells(currentRow, 1), LookIn:=xlValues, LookAt:=xlWhole) 
        If Not foundCell Is Nothing Then
            firstAddress = foundCell.Address
            Do
                If resultRange Is Nothing Then
                    Set resultRange = foundCell
                Else
                    Set resultRange = Union(resultRange, foundCell)
                End If
                Set foundCell = .FindNext(foundCell)
                loopCounter = loopCounter + 1
                If loopCounter > ws.Rows.Count Then Exit Do ' Exit loop if exceeding row count
            Loop While Not foundCell Is Nothing And foundCell.Address <> firstAddress
        End If
    End With

    Set FindAllDuplicates = resultRange

End Function